import streamlit as st
import os
from dotenv import load_dotenv
from langchain_neo4j import Neo4jGraph, GraphCypherQAChain
from langchain_groq import ChatGroq
from langchain.prompts import PromptTemplate
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go

load_dotenv()
NEO4J_CONFIG = {
    'url': os.getenv("NEO4J_URI"),
    'username': os.getenv("NEO4J_USERNAME"),
    'password': os.getenv("NEO4J_PASSWORD"),
    'database': os.getenv("NEO4J_DATABASE", "neo4j")
}

st.set_page_config(page_title="AI Text Detector", page_icon="ü§ñ", layout="wide")
st.title("ü§ñ AI Text Detection System")
st.caption("Advanced detection of AI-generated texts using the AI-GA dataset")

with st.sidebar:
    st.header("üîç Detect AI Text")
    
    input_text = st.text_area(
        "Enter text to analyze:",
        height=200,
        placeholder="Paste your text here for AI detection analysis..."
    )
    
    if st.button("üöÄ Analyze Text", use_container_width=True):
        if input_text:
            ai_indicators = 0
            total_indicators = 5
            
            ai_phrases = ['furthermore', 'moreover', 'additionally', 'consequently', 'it is important to note']
            formal_phrases = ['in conclusion', 'to summarize', 'overall', 'significantly']
            
            if any(phrase in input_text.lower() for phrase in ai_phrases):
                ai_indicators += 1
            if any(phrase in input_text.lower() for phrase in formal_phrases):
                ai_indicators += 1
            if len(input_text.split()) > 100 and input_text.count('.') < len(input_text.split()) / 20:
                ai_indicators += 1
            if input_text.count(',') > len(input_text.split()) / 10:
                ai_indicators += 1
            if 'covid' in input_text.lower() or 'pandemic' in input_text.lower():
                ai_indicators += 1
                
            ai_probability = ai_indicators / total_indicators
            
            st.subheader("üìä Detection Results")
            
            fig = go.Figure(go.Indicator(
                mode = "gauge+number+delta",
                value = ai_probability * 100,
                domain = {'x': [0, 1], 'y': [0, 1]},
                title = {'text': "AI Probability (%)"},
                delta = {'reference': 50},
                gauge = {
                    'axis': {'range': [None, 100]},
                    'bar': {'color': "darkred" if ai_probability > 0.7 else "orange" if ai_probability > 0.3 else "darkgreen"},
                    'steps': [
                        {'range': [0, 30], 'color': "lightgreen"},
                        {'range': [30, 70], 'color': "yellow"},
                        {'range': [70, 100], 'color': "lightcoral"}
                    ],
                    'threshold': {
                        'line': {'color': "red", 'width': 4},
                        'thickness': 0.75,
                        'value': 70
                    }
                }
            ))
            fig.update_layout(height=300)
            st.plotly_chart(fig, use_container_width=True)
        
            if ai_probability > 0.7:
                st.error(" **Likely AI Generated**")
                st.write("High confidence this text was generated by AI")
            elif ai_probability > 0.3:
                st.warning(" **Uncertain**") 
                st.write("Mixed indicators - could be AI or human with AI assistance")
            else:
                st.success(" **Likely Human Written**")
                st.write("Low AI indicators detected")
                
            st.subheader("üîç Analysis Details")
            features = {
                'AI Connectors': any(phrase in input_text.lower() for phrase in ai_phrases),
                'Formal Phrases': any(phrase in input_text.lower() for phrase in formal_phrases),
                'Long Sentences': len(input_text.split()) > 100 and input_text.count('.') < len(input_text.split()) / 20,
                'High Punctuation': input_text.count(',') > len(input_text.split()) / 10,
                'COVID Domain': 'covid' in input_text.lower() or 'pandemic' in input_text.lower()
            }
            
            for feature, detected in features.items():
                if detected:
                    st.write(f" {feature}: Detected")
                else:
                    st.write(f" {feature}: Not detected")

if "messages" not in st.session_state:
    st.session_state.messages = []

@st.cache_resource
def init_chain():
    llm = ChatGroq(
        groq_api_key=os.getenv("GROQ_API_KEY"),
        model_name="mixtral-8x7b-32768",  
        temperature=0.1
    )
    
    kg = Neo4jGraph(**NEO4J_CONFIG)
    
    cypher_template = """You are an expert at generating Neo4j Cypher queries for AI text detection analysis.

Database Schema: {schema}

The database contains Abstract nodes with these key properties:
- generated: boolean (true=AI, false=human)
- ai_likelihood_score: float (0-1, higher=more AI-like)
- connector_density, hedging_density: linguistic features
- avg_sentence_length, unique_word_ratio: style metrics
- covid_terms: count of COVID-related terms

Sample queries:
1. AI vs Human comparison:
MATCH (a:Abstract) 
RETURN a.generated, count(*) as count, avg(a.ai_likelihood_score) as avg_ai_score

2. High AI probability texts:
MATCH (a:Abstract) 
WHERE a.ai_likelihood_score > 0.7
RETURN a.title, a.generated, a.ai_likelihood_score 
ORDER BY a.ai_likelihood_score DESC LIMIT 10

3. Feature analysis:
MATCH (a:Abstract) 
RETURN a.generated, avg(a.connector_density) as avg_connectors, avg(a.hedging_density) as avg_hedging

Question: {question}
Generate a Cypher query to answer this question:"""

    qa_template = """You are an AI text detection expert analyzing academic abstracts.

Context from database: {context}

Question: {question}

Provide a comprehensive analysis including:
- Clear statistics with percentages
- Key findings about AI vs human writing patterns
- Specific linguistic features that distinguish AI text
- Actionable insights for detection

Format your response with clear sections and bullet points for readability."""

    return GraphCypherQAChain.from_llm(
        llm,
        graph=kg,
        cypher_prompt=PromptTemplate.from_template(cypher_template),
        qa_prompt=PromptTemplate.from_template(qa_template),
        verbose=True,
        allow_dangerous_requests=True
    ), kg.get_schema

col1, col2 = st.columns([2, 1])

with col1:
    st.header("üí¨ Ask About AI Detection Patterns")
    
    try:
        chain, schema = init_chain()
        st.success("Connected to AI-GA dataset")
    except Exception as e:
        st.error(f"Database connection failed: {e}")
        chain, schema = None, None

    for msg in st.session_state.messages:
        with st.chat_message(msg["role"]):
            st.markdown(msg["content"])

    if prompt := st.chat_input("Ask about AI text detection patterns..."):
        st.session_state.messages.append({"role": "user", "content": prompt})
        
        with st.chat_message("user"):
            st.markdown(prompt)
        
        with st.chat_message("assistant"):
            if chain:
                try:
                    with st.spinner("Analyzing AI detection patterns..."):
                        response = chain.invoke({"query": prompt, "question": prompt, "schema": schema})
                        answer = response.get('result', 'No results found.')
                        
                        if 'intermediate_steps' in response and response['intermediate_steps']:
                            with st.expander("üîç View Generated Query"):
                                st.code(response['intermediate_steps'][0]['query'], language="cypher")
                        
                        st.markdown(answer)
                        st.session_state.messages.append({"role": "assistant", "content": answer})
                        
                except Exception as e:
                    error_msg = f"Error analyzing query: {str(e)}"
                    st.error(error_msg)
                    st.session_state.messages.append({"role": "assistant", "content": error_msg})
            else:
                st.error("Database not connected")

with col2:
    st.header("üöÄ Quick Analysis")
    quick_queries = [
        "Show AI vs human writing statistics",
        "What are the top AI detection features?",
        "Find abstracts with highest AI probability", 
        "Compare connector usage in AI vs human texts",
        "Show COVID-19 terms distribution",
        "Which patterns indicate AI generation?",
        "Analyze sentence length differences"
    ]
    
    for query in quick_queries:
        if st.button(query, use_container_width=True, key=query):
            st.session_state.messages.append({"role": "user", "content": query})
            st.rerun()
    
    st.markdown("---")
    st.subheader("üìà Dataset Overview")
    try:
        if chain:
            basic_stats = """
            MATCH (a:Abstract) 
            RETURN count(a) as total,
                   sum(CASE WHEN a.generated THEN 1 ELSE 0 END) as ai_count,
                   avg(a.ai_likelihood_score) as avg_ai_score
            """
            
            st.info("""
            **AI-GA Dataset**
            - COVID-19 research abstracts
            - 50% AI-generated, 50% human-written
            - Advanced linguistic feature analysis
            - Plagiarism detection integrated
            """)
    except:
        st.info("Connect to database to see stats")
    
    st.markdown("---")
    
    st.subheader("üí° Example Questions")
    st.markdown("""
    **Detection Analysis:**
    - "What percentage of texts are correctly identified?"
    - "Show me the most AI-like human texts"
    
    **Feature Analysis:**
    - "Which linguistic features best predict AI text?"
    - "How do sentence patterns differ?"
    
    **Domain Analysis:**
    - "Do AI texts use more COVID terms?"
    - "What keywords are most common in AI abstracts?"
    """)

st.markdown("---")
st.markdown("""
<div style='text-align: center; color: gray;'>
ü§ñ AI Text Detection System | Built with Streamlit, Neo4j, and Groq
</div>
""", unsafe_allow_html=True)